"""
Helps validate requests and responses to and from the database.

Attributes:
    Base (DeclarativeMeta): Base class for declarative class definitions. Model classes inherit from this class.

Classes:
    JournalBase: Base model for journal entries
    GroupBase: Base model for groups
    CodeBase: Base model for code snippets
    UserBase: Base model for users
    UserCreate: Model for creating a new user
    UserInDB: Model for existing user data
    LoginRequest: Model for user login details
    EntryBase: Base model for journal entries
    TagBase: Base model for tags
    JournalCreate: Model for creating a new journal entry
    GroupCreate: Model for creating a new group
    CodeCreate: Model for creating a new code snippet
    EntryCreate: Model for creating a new journal entry
    TagCreate: Model for creating a new tag
    Journal: Model for journal entries. Inherits everything from JournalBase.
    Group: Model for groups. Inherits everything from GroupBase.
    User: Model for users. Inherits everything from UserBase.
    Code: Model for code snippets. Inherits everything from CodeBase.
    Entry: Model for journal entries. Inherits everything from EntryBase.
    Tag: Model for tags. Inherits everything from TagBase.
"""

from pydantic import BaseModel, EmailStr, Field
from typing import Optional
from datetime import datetime, timezone
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

"""
BaseModels are used to validate the request body of some requests.
Some fields are optional because they are not required for the
request, and are instead generated by DB
"""


class JournalBase(BaseModel):
    """
    This class validates the request body for creating a new journal entry.

    Attributes:
        journal_id (Optional[int]): The primary key for the table
        group_id (Optional[int]): The foreign key to the Group table
        journal_title (str): The title of the journal entry
        created_at (Optional[datetime]): The timestamp for when the journal entry was created
        updated_at (Optional[datetime]): The timestamp for when the journal entry was last updated

    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    journal_id: Optional[int] = None  # PK
    group_id: Optional[int] = None  # FK references Group.group_id
    journal_title: str
    created_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc)
    )  # using a factory prevents all instances from having the same time
    updated_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc)
    )

    """
    Required when working with SQLAlchemy ORM
    """

    class Config:
        orm_mode = True


class GroupBase(BaseModel):
    """
    This class validates the request body for creating a new group.

    Attributes:
        group_id (Optional[int]): The primary key for the table
        group_name (str): The name of the group
        group_desc (Optional[str]): The description of the group
        created_at (Optional[datetime]): The timestamp for when the group was created
        updated_at (Optional[datetime]): The timestamp for when the group was last updated
    
    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    group_id: Optional[int]  # PK
    group_name: str
    group_desc: Optional[str] = None
    created_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc)
    )
    updated_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc)
    )

    class Config:
        orm_mode = True


class CodeBase(BaseModel):
    """
    This class validates the request body for creating a new code snippet.

    Attributes:
        code_id (Optional[int]): The primary key for the table
        journal_id (Optional[int]): The foreign key to the Journal table
        code_text (str): The code snippet text
        language (str): The language of the code snippet
        created_at (Optional[datetime]): The timestamp for when the code snippet was created
        updated_at (Optional[datetime]): The timestamp for when the code snippet was last updated
    
    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    code_id: Optional[int]  # PK
    journal_id: Optional[int] = None
    code_text: str
    language: str
    created_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc)
    )  # using a factory prevents all instances from having the same time
    updated_at: Optional[datetime] = Field(
        default_factory=lambda: datetime.now(timezone.utc)
    )

    class Config:
        orm_mode = True


class UserBase(BaseModel):
    """
    This class validates the request body for creating a new user.

    Attributes:
        user_id (Optional[int]): The primary key for the table
        first_name (str): The first name of the user
        last_name (str): The last name of the user
        email (EmailStr): The email address of the user
    
    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    user_id: Optional[int] = None
    first_name: str
    last_name: str
    email: EmailStr  # Pydantic type that ensures correct format

    class Config:
        orm_mode = True


class UserCreate(UserBase):
    """
    This class specifies the fields required to be passed in to create a new user.

    Attributes:
        password (str): The password of the user
    """
    password: str  # Password is required only during signup


class UserInDB(UserBase):
    """
    This class specifies the fields that are returned when a user is retrieved from the database.

    Attributes:
        user_id (int): The primary key for the table
        created_at (datetime): The timestamp for when the user was created
        updated_at (datetime): The timestamp for when the user was last updated
    
    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    user_id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True


class LoginRequest(BaseModel):
    """
    This class validates the request body for user login details.

    Attributes:
        email (str): The email address of the user
        password (str): The password of the user
    
    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    email: str
    password: str

    class Config:
        # Ensures the input is compatible with SQLAlchemy models (ORM)
        orm_mode = True


class EntryBase(BaseModel):
    """
    This class validates the request body for creating a new journal entry.

    Attributes:
        entry_id (Optional[int]): The primary key for the table
        journal_id (int): The foreign key to the Journal table
        entry_text (str): The text of the journal entry
        word_count (Optional[int]): The word count of the journal entry
    
    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    entry_id: Optional[int] = None  # PK
    journal_id: int  # FK references Journal.journal_id
    entry_text: str
    word_count: Optional[int] = None  # generated by DB

    class Config:
        orm_mode = True


class TagBase(BaseModel):
    """
    This class validates the request body for creating a new tag.

    Attributes:
        tag_id (Optional[int]): The primary key for the table
        tag_name (str): The name of the tag
    
    Classes:
        Config: Pydantic configuration class for ORM mode
    """
    tag_id: Optional[int] = None  # PK
    tag_name: str

    class Config:
        orm_mode = True


"""
These classes are used to create new items via API request.
They involve fields involved from request
"""


class JournalCreate(BaseModel):
    """
    This class specifies the fields required to be passed in to create a new journal entry.

    Attributes:
        journal_title (str): The title of the journal entry
        group_id (Optional[int]): The foreign key to the Group table
    """
    journal_title: str
    group_id: Optional[int]  # Journals can be created without a group


class GroupCreate(BaseModel):
    """
    This class specifies the fields required to be passed in to create a new group.

    Attributes:
        group_name (str): The name of the group
        group_desc (Optional[str]): The description of the group
    """
    group_name: str
    group_desc: Optional[str]  # Optional description


class CodeCreate(BaseModel):
    """
    This class specifies the fields required to be passed in to create a new code snippet.

    Attributes:
        journal_id (int): The foreign key to the Journal table
        code_text (str): The code snippet text
        language (str): The language of the code snippet
    """
    journal_id: int
    code_text: str
    Language: str


class EntryCreate(BaseModel):
    """
    This class specifies the fields required to be passed in to create a new journal entry.

    Attributes:
        journal_id (int): The foreign key to the Journal table
        entry_text (str): The text of the
    """
    journal_id: int
    entry_text: str


class TagCreate(BaseModel):
    """
    This class specifies the fields required to be passed in to create a new tag.

    Attributes:
        tag_name (str): The name of the tag
    """
    tag_name: str


# These classes represent the actual data of the items.
# Empty for now because they inherit all necessary info from the BaseModels


class Journal(JournalBase):
    """
    This class represents the model for journal entries, and inherits everything from JournalBase.
    """
    pass


class Group(GroupBase):
    """
    This class represents the model for groups, and inherits everything from GroupBase.
    """
    pass


class User(UserBase):
    """
    This class represents the model for users, and inherits everything from UserBase.
    """
    pass


class Code(CodeBase):
    """
    This class represents the model for code snippets, and inherits everything from CodeBase.
    """
    pass


class Entry(EntryBase):
    """
    This class represents the model for journal entries, and inherits everything from EntryBase.
    """
    pass
