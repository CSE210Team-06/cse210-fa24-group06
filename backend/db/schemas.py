'''
Helps validate requests and responses to and from the database.
'''
from pydantic import BaseModel
from typing import Optional

'''
BaseModels are used to validate the request body of some requests.
Some fields are optional because they are not required for the request, and are instead generated by DB
'''
class JournalBase(BaseModel):
    journal_id: Optional[int] # PK
    journal_text: str
    group_id: Optional[int] # FK references Group.group_id
    journal_title: str
    created_at: Optional[str]
    updated_at: Optional[str]

    '''
    Required when working with SQLAlchemy ORM
    '''
    class Config:
        orm_mode = True

class GroupBase(BaseModel):
    group_id: Optional[int] # PK
    group_name: str
    group_desc: Optional[str]
    created_at: Optional[str]
    updated_at: Optional[str]

    class Config:
        orm_mode = True

'''
These classes are used to create new items via API request.
They involve fields involved from request
'''
class JournalCreate(JournalBase):
    journal_text: str
    journal_title: str
    group_id: Optional[int]  # Journals can be created without a group

class GroupCreate(GroupBase):
    group_name: str
    group_desc: Optional[str]  # Optional description

'''
These classes represent the actual data of the items.
Empty for now because they inherit all necessary info from the BaseModels
'''
class Journal(JournalBase):
    pass 

class Group(GroupBase):
    pass